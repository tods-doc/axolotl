{"ongoing_trials": {}, "hyperparameters": "{'space': [{'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': '6a520746-108c-45bf-a6d8-c875b5a9d326', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'values': ['6a520746-108c-45bf-a6d8-c875b5a9d326', 'a6b468a5-4d03-405e-a707-8e377f9ad1c3', 'ef1c483a-34fc-4398-a6b3-063b33786972'], 'p': Enumeration(values=['6a520746-108c-45bf-a6d8-c875b5a9d326', 'a6b468a5-4d03-405e-a707-8e377f9ad1c3', 'ef1c483a-34fc-4398-a6b3-063b33786972'], default=6a520746-108c-45bf-a6d8-c875b5a9d326)}}, {'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'mean', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The imputation strategy.  - If \"mean\", then replace missing values using the mean along each column. Can only be used with numeric data. - If \"median\", then replace missing values using the median along each column. Can only be used with numeric data. - If \"most_frequent\", then replace missing using the most frequent value along each column. Can be used with strings or numeric data. - If \"constant\", then replace missing values with fill_value. Can be used with strings or numeric data.  .. versionadded:: 0.20 strategy=\"constant\" for fixed value imputation.', 'values': ['median', 'most_frequent', 'mean', 'constant'], 'p': Enumeration(values=['median', 'most_frequent', 'mean', 'constant'], default=mean)}}, {'class_name': 'UniformBool', 'config': {'type': d3m.metadata.hyperparams.UniformBool, 'default': False, 'structural_type': <class 'bool'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'p': UniformBool(default=False)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[int, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'When strategy == \"constant\", fill_value is used to replace all occurrences of missing_values. If left to the default, fill_value will be 0 when imputing numerical data and \"missing_value\" for strings or object data types.', 'configuration': {'int': {'type': d3m.metadata.hyperparams.Hyperparameter, 'default': 0, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={int: Hyperparameter(default=0), none: Constant(default=None)}, default=None)}}, {'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'SPEC', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'different method to choose for feature selection', 'values': ['SPEC', 'fisher_score', 'reliefF', 'CIFE', 'f_score', 'chi_square'], 'p': Enumeration(values=['SPEC', 'fisher_score', 'reliefF', 'CIFE', 'f_score', 'chi_square'], default=SPEC)}}, {'class_name': 'Uniform', 'config': {'type': d3m.metadata.hyperparams.Uniform, 'default': 0.5, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'percentage of features to select, between 0 and 1', 'lower': 0.25, 'upper': 1, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Uniform(lower=0.25, upper=1, q=None, default=0.5, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 10, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The number of trees in the forest.', 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=1, upper=None, default=10, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'gini', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The function to measure the quality of a split. Supported criteria are \"gini\" for the Gini impurity and \"entropy\" for the information gain. Note: this parameter is tree-specific.', 'values': ['gini', 'entropy'], 'p': Enumeration(values=['gini', 'entropy'], default=gini)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': 'auto', 'structural_type': typing.Union[str, NoneType, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a percentage and `int(max_features * n_features)` features are considered at each split. - If \"auto\", then `max_features=sqrt(n_features)`. - If \"sqrt\", then `max_features=sqrt(n_features)` (same as \"auto\"). - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features.', 'configuration': {'calculated': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'auto', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'values': ['auto', 'sqrt', 'log2']}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}, 'percent': {'type': d3m.metadata.hyperparams.Uniform, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 1, 'lower_inclusive': True, 'upper_inclusive': False}}, 'p': Union(configuration={calculated: Enumeration(values=['auto', 'sqrt', 'log2'], default=auto), none: Constant(default=None), percent: Uniform(lower=0, upper=1, q=None, default=0.25, lower_inclusive=True, upper_inclusive=False)}, default=auto)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[int, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.', 'configuration': {'int': {'type': d3m.metadata.hyperparams.Bounded, 'default': 10, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={int: Bounded(lower=0, upper=None, default=10, lower_inclusive=True, upper_inclusive=False), none: Constant(default=None)}, default=None)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': 2, 'structural_type': typing.Union[int, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a percentage and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split.  .. versionchanged:: 0.18 Added float values for percentages.', 'configuration': {'absolute': {'type': d3m.metadata.hyperparams.Bounded, 'default': 2, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'percent': {'type': d3m.metadata.hyperparams.Uniform, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 1, 'lower_inclusive': False, 'upper_inclusive': True}}, 'p': Union(configuration={absolute: Bounded(lower=1, upper=None, default=2, lower_inclusive=True, upper_inclusive=False), percent: Uniform(lower=0, upper=1, q=None, default=0.25, lower_inclusive=False, upper_inclusive=True)}, default=2)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': 1, 'structural_type': typing.Union[int, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum number of samples required to be at a leaf node:  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a percentage and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node.  .. versionchanged:: 0.18 Added float values for percentages.', 'configuration': {'absolute': {'type': d3m.metadata.hyperparams.Bounded, 'default': 1, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'percent': {'type': d3m.metadata.hyperparams.Uniform, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 0.5, 'lower_inclusive': False, 'upper_inclusive': True}}, 'p': Union(configuration={absolute: Bounded(lower=1, upper=None, default=1, lower_inclusive=True, upper_inclusive=False), percent: Uniform(lower=0, upper=0.5, q=None, default=0.25, lower_inclusive=False, upper_inclusive=True)}, default=1)}}, {'class_name': 'Uniform', 'config': {'type': d3m.metadata.hyperparams.Uniform, 'default': 0, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided.', 'lower': 0, 'upper': 0.5, 'lower_inclusive': True, 'upper_inclusive': True, 'p': Uniform(lower=0, upper=0.5, q=None, default=0, lower_inclusive=True, upper_inclusive=True)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[int, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes.', 'configuration': {'int': {'type': d3m.metadata.hyperparams.Bounded, 'default': 10, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={int: Bounded(lower=0, upper=None, default=10, lower_inclusive=True, upper_inclusive=False), none: Constant(default=None)}, default=None)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.0, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::  N_t / N * (impurity - N_t_R / N_t * right_impurity - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19 ', 'lower': 0.0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=0.0, upper=None, default=0.0, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'bootstrap', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'Whether bootstrap samples are used when building trees. And whether to use out-of-bag samples to estimate the generalization accuracy.', 'values': ['bootstrap', 'bootstrap_with_oob_score', 'disabled'], 'p': Enumeration(values=['bootstrap', 'bootstrap_with_oob_score', 'disabled'], default=bootstrap)}}, {'class_name': 'UniformBool', 'config': {'type': d3m.metadata.hyperparams.UniformBool, 'default': False, 'structural_type': <class 'bool'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest.', 'p': UniformBool(default=False)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[str, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': '\"balanced_subsample\" or None, optional (default=None) Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``  The \"balanced_subsample\" mode is the same as \"balanced\" except that weights are computed based on the bootstrap sample for every tree grown.  For multi-output, the weights of each column of y will be multiplied.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.', 'configuration': {'str': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'balanced', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'values': ['balanced', 'balanced_subsample']}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={str: Enumeration(values=['balanced', 'balanced_subsample'], default=balanced), none: Constant(default=None)}, default=None)}}, {'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'deviance', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': \"loss function to be optimized. 'deviance' refers to deviance (= logistic regression) for classification with probabilistic outputs. For loss 'exponential' gradient boosting recovers the AdaBoost algorithm.\", 'values': ['deviance', 'exponential'], 'p': Enumeration(values=['deviance', 'exponential'], default=deviance)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.1, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'learning rate shrinks the contribution of each tree by `learning_rate`. There is a trade-off between learning_rate and n_estimators.', 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=0, upper=None, default=0.1, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 100, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large number usually results in better performance.', 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=1, upper=None, default=100, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 3, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'maximum depth of the individual regression estimators. The maximum depth limits the number of nodes in the tree. Tune this parameter for best performance; the best value depends on the interaction of the input variables.', 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=0, upper=None, default=3, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'friedman_mse', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The function to measure the quality of a split. Supported criteria are \"friedman_mse\" for the mean squared error with improvement score by Friedman, \"mse\" for mean squared error, and \"mae\" for the mean absolute error. The default value of \"friedman_mse\" is generally the best as it can provide a better approximation in some cases.  .. versionadded:: 0.18', 'values': ['friedman_mse', 'mse', 'mae'], 'p': Enumeration(values=['friedman_mse', 'mse', 'mae'], default=friedman_mse)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': 2, 'structural_type': typing.Union[int, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a percentage and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split.  .. versionchanged:: 0.18 Added float values for percentages.', 'configuration': {'absolute': {'type': d3m.metadata.hyperparams.Bounded, 'default': 2, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'percent': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 1, 'lower_inclusive': True, 'upper_inclusive': True}}, 'p': Union(configuration={absolute: Bounded(lower=1, upper=None, default=2, lower_inclusive=True, upper_inclusive=False), percent: Bounded(lower=0, upper=1, default=0.25, lower_inclusive=True, upper_inclusive=True)}, default=2)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': 1, 'structural_type': typing.Union[int, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum number of samples required to be at a leaf node:  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a percentage and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node.  .. versionchanged:: 0.18 Added float values for percentages.', 'configuration': {'absolute': {'type': d3m.metadata.hyperparams.Bounded, 'default': 1, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'percent': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 0.5, 'lower_inclusive': True, 'upper_inclusive': True}}, 'p': Union(configuration={absolute: Bounded(lower=1, upper=None, default=1, lower_inclusive=True, upper_inclusive=False), percent: Bounded(lower=0, upper=0.5, default=0.25, lower_inclusive=True, upper_inclusive=True)}, default=1)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided.', 'lower': 0, 'upper': 0.5, 'lower_inclusive': True, 'upper_inclusive': True, 'p': Bounded(lower=0, upper=0.5, default=0, lower_inclusive=True, upper_inclusive=True)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 1.0, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0 this results in Stochastic Gradient Boosting. `subsample` interacts with the parameter `n_estimators`. Choosing `subsample < 1.0` leads to a reduction of variance and an increase in bias.', 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=0, upper=None, default=1.0, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[int, str, NoneType, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a percentage and `int(max_features * n_features)` features are considered at each split. - If \"auto\", then `max_features=sqrt(n_features)`. - If \"sqrt\", then `max_features=sqrt(n_features)`. - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Choosing `max_features < n_features` leads to a reduction of variance and an increase in bias.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features.', 'configuration': {'specified_int': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'calculated': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'auto', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'values': ['auto', 'sqrt', 'log2']}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}, 'percent': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 1, 'lower_inclusive': True, 'upper_inclusive': True}}, 'p': Union(configuration={specified_int: Bounded(lower=0, upper=None, default=0, lower_inclusive=True, upper_inclusive=False), calculated: Enumeration(values=['auto', 'sqrt', 'log2'], default=auto), none: Constant(default=None), percent: Bounded(lower=0, upper=1, default=0.25, lower_inclusive=True, upper_inclusive=True)}, default=None)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[int, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes.', 'configuration': {'int': {'type': d3m.metadata.hyperparams.Bounded, 'default': 10, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={int: Bounded(lower=0, upper=None, default=10, lower_inclusive=True, upper_inclusive=False), none: Constant(default=None)}, default=None)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.0, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::  N_t / N * (impurity - N_t_R / N_t * right_impurity - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19', 'lower': 0.0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=0.0, upper=None, default=0.0, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'UniformBool', 'config': {'type': d3m.metadata.hyperparams.UniformBool, 'default': False, 'structural_type': <class 'bool'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just erase the previous solution.', 'p': UniformBool(default=False)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.1, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if ``n_iter_no_change`` is set to an integer.', 'lower': 0, 'upper': 1, 'lower_inclusive': True, 'upper_inclusive': True, 'p': Bounded(lower=0, upper=1, default=0.1, lower_inclusive=True, upper_inclusive=True)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[int, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': '``n_iter_no_change`` is used to decide if early stopping will be used to terminate training when validation score is not improving. By default it is set to None to disable early stopping. If set to a number, it will set aside ``validation_fraction`` size of the training data as validation and terminate training when validation score is not improving in all of the previous ``n_iter_no_change`` numbers of iterations.', 'configuration': {'int': {'type': d3m.metadata.hyperparams.Bounded, 'default': 5, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={int: Bounded(lower=0, upper=None, default=5, lower_inclusive=True, upper_inclusive=False), none: Constant(default=None)}, default=None)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.0001, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'Tolerance for the early stopping. When the loss is not improving by at least tol for ``n_iter_no_change`` iterations (if set to a number), the training stops.', 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=0, upper=None, default=0.0001, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 10, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The number of trees in the forest.', 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=1, upper=None, default=10, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'gini', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The function to measure the quality of a split. Supported criteria are \"gini\" for the Gini impurity and \"entropy\" for the information gain.', 'values': ['gini', 'entropy'], 'p': Enumeration(values=['gini', 'entropy'], default=gini)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[int, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.', 'configuration': {'int': {'type': d3m.metadata.hyperparams.Bounded, 'default': 10, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={int: Bounded(lower=0, upper=None, default=10, lower_inclusive=True, upper_inclusive=False), none: Constant(default=None)}, default=None)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': 2, 'structural_type': typing.Union[int, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a percentage and `ceil(min_samples_split * n_samples)` are the minimum number of samples for each split.  .. versionchanged:: 0.18 Added float values for percentages.', 'configuration': {'absolute': {'type': d3m.metadata.hyperparams.Bounded, 'default': 2, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'percent': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 1, 'lower_inclusive': True, 'upper_inclusive': True}}, 'p': Union(configuration={absolute: Bounded(lower=1, upper=None, default=2, lower_inclusive=True, upper_inclusive=False), percent: Bounded(lower=0, upper=1, default=0.25, lower_inclusive=True, upper_inclusive=True)}, default=2)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': 1, 'structural_type': typing.Union[int, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum number of samples required to be at a leaf node:  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a percentage and `ceil(min_samples_leaf * n_samples)` are the minimum number of samples for each node.  .. versionchanged:: 0.18 Added float values for percentages.', 'configuration': {'absolute': {'type': d3m.metadata.hyperparams.Bounded, 'default': 1, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 1, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'percent': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 0.5, 'lower_inclusive': True, 'upper_inclusive': True}}, 'p': Union(configuration={absolute: Bounded(lower=1, upper=None, default=1, lower_inclusive=True, upper_inclusive=False), percent: Bounded(lower=0, upper=0.5, default=0.25, lower_inclusive=True, upper_inclusive=True)}, default=1)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided.', 'lower': 0, 'upper': 0.5, 'lower_inclusive': True, 'upper_inclusive': True, 'p': Bounded(lower=0, upper=0.5, default=0, lower_inclusive=True, upper_inclusive=True)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[int, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes.', 'configuration': {'int': {'type': d3m.metadata.hyperparams.Bounded, 'default': 10, 'structural_type': <class 'int'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={int: Bounded(lower=0, upper=None, default=10, lower_inclusive=True, upper_inclusive=False), none: Constant(default=None)}, default=None)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': 'auto', 'structural_type': typing.Union[str, NoneType, float], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a percentage and `int(max_features * n_features)` features are considered at each split. - If \"auto\", then `max_features=sqrt(n_features)`. - If \"sqrt\", then `max_features=sqrt(n_features)`. - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features.', 'configuration': {'calculated': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'auto', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'values': ['auto', 'sqrt', 'log2']}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}, 'percent': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.25, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'lower': 0, 'upper': 1, 'lower_inclusive': False, 'upper_inclusive': True}}, 'p': Union(configuration={calculated: Enumeration(values=['auto', 'sqrt', 'log2'], default=auto), none: Constant(default=None), percent: Bounded(lower=0, upper=1, default=0.25, lower_inclusive=False, upper_inclusive=True)}, default=auto)}}, {'class_name': 'Bounded', 'config': {'type': d3m.metadata.hyperparams.Bounded, 'default': 0.0, 'structural_type': <class 'float'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::  N_t / N * (impurity - N_t_R / N_t * right_impurity - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19 ', 'lower': 0.0, 'upper': None, 'lower_inclusive': True, 'upper_inclusive': False, 'p': Bounded(lower=0.0, upper=None, default=0.0, lower_inclusive=True, upper_inclusive=False)}}, {'class_name': 'Enumeration', 'config': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'bootstrap', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'Whether bootstrap samples are used when building trees. And whether to use out-of-bag samples to estimate the generalization accuracy.', 'values': ['bootstrap', 'bootstrap_with_oob_score', 'disabled'], 'p': Enumeration(values=['bootstrap', 'bootstrap_with_oob_score', 'disabled'], default=bootstrap)}}, {'class_name': 'UniformBool', 'config': {'type': d3m.metadata.hyperparams.UniformBool, 'default': False, 'structural_type': <class 'bool'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest.', 'p': UniformBool(default=False)}}, {'class_name': 'Union', 'config': {'type': d3m.metadata.hyperparams.Union, 'default': None, 'structural_type': typing.Union[str, NoneType], 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'description': 'Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y.  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``  The \"balanced_subsample\" mode is the same as \"balanced\" except that weights are computed based on the bootstrap sample for every tree grown.  For multi-output, the weights of each column of y will be multiplied.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.', 'configuration': {'str': {'type': d3m.metadata.hyperparams.Enumeration, 'default': 'balanced', 'structural_type': <class 'str'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter'], 'values': ['balanced', 'balanced_subsample']}, 'none': {'type': d3m.metadata.hyperparams.Constant, 'default': None, 'structural_type': <class 'NoneType'>, 'semantic_types': ['https://metadata.datadrivendiscovery.org/types/TuningParameter']}}, 'p': Union(configuration={str: Enumeration(values=['balanced', 'balanced_subsample'], default=balanced), none: Constant(default=None)}, default=None)}}], 'values': {'pipeline_choice': '6a520746-108c-45bf-a6d8-c875b5a9d326', 'step5/d3m.primitives.data_cleaning.imputer.SKlearn/strategy': 'mean', 'step5/d3m.primitives.data_cleaning.imputer.SKlearn/add_indicator': False, 'step5/d3m.primitives.data_cleaning.imputer.SKlearn/fill_value': None, 'step6/d3m.primitives.feature_selection.skfeature.TAMU/selection_method': 'SPEC', 'step6/d3m.primitives.feature_selection.skfeature.TAMU/percentage_selected_features': 0.5, 'step7/d3m.primitives.classification.random_forest.SKlearn/n_estimators': 10, 'step7/d3m.primitives.classification.random_forest.SKlearn/criterion': 'gini', 'step7/d3m.primitives.classification.random_forest.SKlearn/max_features': 'auto', 'step7/d3m.primitives.classification.random_forest.SKlearn/max_depth': None, 'step7/d3m.primitives.classification.random_forest.SKlearn/min_samples_split': 2, 'step7/d3m.primitives.classification.random_forest.SKlearn/min_samples_leaf': 1, 'step7/d3m.primitives.classification.random_forest.SKlearn/min_weight_fraction_leaf': 0, 'step7/d3m.primitives.classification.random_forest.SKlearn/max_leaf_nodes': None, 'step7/d3m.primitives.classification.random_forest.SKlearn/min_impurity_decrease': 0.0, 'step7/d3m.primitives.classification.random_forest.SKlearn/bootstrap': 'bootstrap', 'step7/d3m.primitives.classification.random_forest.SKlearn/warm_start': False, 'step7/d3m.primitives.classification.random_forest.SKlearn/class_weight': None}}"}